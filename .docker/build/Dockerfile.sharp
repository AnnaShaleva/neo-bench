# NEO private network - Dockerfile
# build RocksDBStore plugin from source
FROM mcr.microsoft.com/dotnet/core/sdk:3.1 as Build

RUN set -x \
    && apt-get update \
    && apt-get install -y \
        unzip \
        wget \
    # APT cleanup to reduce image size
    && rm -rf /var/lib/apt/lists/*

RUN wget -O /tmp/neo-modules.zip https://github.com/neo-project/neo-modules/archive/master.zip && \
    unzip -q -d /tmp/ /tmp/neo-modules.zip && \
    dotnet restore /tmp/neo-modules-master/src/RocksDBStore/ --source https://www.myget.org/F/neo/api/v3/index.json --source https://api.nuget.org/v3/index.json  && \
    dotnet publish -c Release /tmp/neo-modules-master/src/RocksDBStore/

FROM microsoft/dotnet:3.0-runtime-stretch-slim

# arguments to choose version of neo-cli to install (defaults to 2.10.3)
ARG VERSION="3.0.0-preview3"

# Frontend non-interactive
ENV DEBIAN_FRONTEND noninteractive

# Disable dotnet usage information collection
# https://docs.microsoft.com/en-us/dotnet/core/tools/telemetry#behavior
ENV DOTNET_CLI_TELEMETRY_OPTOUT 1

# Install system dependencies. always should be done in one line
# https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/#run
RUN set -x \
    && apt-get update \
    && apt-get install -y \
        unzip \
        screen \
        libleveldb-dev \
        wget \
        curl \
        jq \
        libssl-dev \
        libunwind8 \
        librocksdb-dev \
        libc6-dev \
    # APT cleanup to reduce image size
    && rm -rf /var/lib/apt/lists/*

# Download, add and decompress the neo-cli package. At the end, delete the zip file.
# $VERSION is a build argument
ENV URL="https://github.com/neo-project/neo-node/releases/download/v${VERSION}/neo-cli-linux-x64.zip"
RUN wget -O /opt/neo-cli.zip ${URL} && \
    unzip -q -d /neo-cli /opt/neo-cli.zip && \
    mv /neo-cli/linux-x64/* /neo-cli && \
    rm -r /neo-cli/linux-x64 && \
    rm /opt/neo-cli.zip

ENV MODULES="RpcServer"
# RocksDBStore SimplePolicy ApplicationLogs"
ENV URL="https://github.com/neo-project/neo-modules/releases/download/v${VERSION}-00"

# Download, add and decompress version-dependant plugin packages. At the end, delete the zip files.
RUN for mod in ${MODULES}; do \
        wget -O /tmp/${mod}.zip ${URL}/${mod}.zip; \
        unzip -q -d /neo-cli /tmp/${mod}.zip; \
        rm /tmp/${mod}.zip; \
    done

# Copy RocksDBStore plugin with dependant dlls from Build
COPY  --from=Build /tmp/neo-modules-master/src/RocksDBStore/bin/Release/netstandard2.1/publish/RocksDBStore.dll \
    /tmp/neo-modules-master/src/RocksDBStore/bin/Release/netstandard2.1/publish/RocksDbSharp.dll \
    /tmp/neo-modules-master/src/RocksDBStore/bin/Release/netstandard2.1/publish/RocksDbNative.dll \
    /tmp/neo-modules-master/src/RocksDBStore/bin/Release/netstandard2.1/publish/RocksDbNative.dll /neo-cli/Plugins/
COPY --from=Build /tmp/neo-modules-master/src/RocksDBStore/bin/Release/netstandard2.1/publish/RocksDBStore/ /neo-cli/Plugins/RocksDBStore/

# A welcome message for bash users
RUN echo "printf \"\n* Consensus nodes are running in screen sessions, check 'screen -ls'\"" >> /root/.bashrc
RUN echo "printf \"\n* Please report issues to https://github.com/CityOfZion/neo-local\n\n\"" >> /root/.bashrc

WORKDIR /neo-cli

RUN chmod +x /neo-cli/neo-cli


COPY ./dump.acc /
COPY ./single.acc /
COPY ./sharp.entrypoint.sh /entrypoint.sh
COPY ./sharp.healthcheck.sh /healthcheck.sh
COPY ./sharp.rpc.config.json /neo-cli/Plugins/RpcServer/config.json

ENTRYPOINT [ "/entrypoint.sh" ]
